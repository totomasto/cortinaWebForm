{"version":3,"sources":["../../../lib/doc/range.js"],"names":["colCache","require","Range","module","exports","decode","arguments","prototype","_set_tlbr","t","l","b","r","s","model","top","Math","min","left","bottom","max","right","sheetName","_set_tl_br","tl","br","decodeAddress","row","col","argv","length","value","Array","tlbr","decodeEx","Error","_serialisedSheetName","test","expand","expandRow","dimensions","number","expandToAddress","addressStr","address","n2l","$t$l","$b$r","range","$range","shortRange","count","$shortRange","toString","intersects","other","contains","containsEx"],"mappings":"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","sourcesContent":["'use strict';\n\nconst colCache = require('./../utils/col-cache');\n\n// used by worksheet to calculate sheet dimensions\nconst Range = (module.exports = function() {\n  this.decode(arguments);\n});\n\nRange.prototype = {\n  _set_tlbr(t, l, b, r, s) {\n    this.model = {\n      top: Math.min(t, b),\n      left: Math.min(l, r),\n      bottom: Math.max(t, b),\n      right: Math.max(l, r),\n      sheetName: s,\n    };\n  },\n  _set_tl_br(tl, br, s) {\n    tl = colCache.decodeAddress(tl);\n    br = colCache.decodeAddress(br);\n    this._set_tlbr(tl.row, tl.col, br.row, br.col, s);\n  },\n  decode(argv) {\n    switch (argv.length) {\n      case 5: // [t,l,b,r,s]\n        this._set_tlbr(argv[0], argv[1], argv[2], argv[3], argv[4]);\n        break;\n      case 4: // [t,l,b,r]\n        this._set_tlbr(argv[0], argv[1], argv[2], argv[3]);\n        break;\n\n      case 3: // [tl,br,s]\n        this._set_tl_br(argv[0], argv[1], argv[2]);\n        break;\n      case 2: // [tl,br]\n        this._set_tl_br(argv[0], argv[1]);\n        break;\n\n      case 1:\n        const value = argv[0];\n        if (value instanceof Range) {\n          // copy constructor\n          this.model = {\n            top: value.model.top,\n            left: value.model.left,\n            bottom: value.model.bottom,\n            right: value.model.right,\n            sheetName: value.sheetName,\n          };\n        } else if (value instanceof Array) {\n          // an arguments array\n          this.decode(value);\n        } else if (value.top && value.left && value.bottom && value.right) {\n          // a model\n          this.model = {\n            top: value.top,\n            left: value.left,\n            bottom: value.bottom,\n            right: value.right,\n            sheetName: value.sheetName,\n          };\n        } else {\n          // [sheetName!]tl:br\n          const tlbr = colCache.decodeEx(value);\n          if (tlbr.top) {\n            this.model = {\n              top: tlbr.top,\n              left: tlbr.left,\n              bottom: tlbr.bottom,\n              right: tlbr.right,\n              sheetName: tlbr.sheetName,\n            };\n          } else {\n            this.model = {\n              top: tlbr.row,\n              left: tlbr.col,\n              bottom: tlbr.row,\n              right: tlbr.col,\n              sheetName: tlbr.sheetName,\n            };\n          }\n        }\n        break;\n\n      case 0:\n        this.model = {\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n        };\n        break;\n\n      default:\n        throw new Error(`Invalid number of arguments to _getDimensions() - ${argv.length}`);\n    }\n  },\n\n  get top() {\n    return this.model.top || 1;\n  },\n  set top(value) {\n    this.model.top = value;\n  },\n  get left() {\n    return this.model.left || 1;\n  },\n  set left(value) {\n    this.model.left = value;\n  },\n  get bottom() {\n    return this.model.bottom || 1;\n  },\n  set bottom(value) {\n    this.model.bottom = value;\n  },\n  get right() {\n    return this.model.right || 1;\n  },\n  set right(value) {\n    this.model.right = value;\n  },\n  get sheetName() {\n    return this.model.sheetName;\n  },\n  set sheetName(value) {\n    this.model.sheetName = value;\n  },\n\n  get _serialisedSheetName() {\n    const sheetName = this.model.sheetName;\n    if (sheetName) {\n      if (/^[a-zA-Z0-9]*$/.test(sheetName)) {\n        return `${sheetName}!`;\n      }\n      return `'${sheetName}'!`;\n    }\n    return '';\n  },\n\n  expand(top, left, bottom, right) {\n    if (!this.model.top || top < this.top) this.top = top;\n    if (!this.model.left || left < this.left) this.left = left;\n    if (!this.model.bottom || bottom > this.bottom) this.bottom = bottom;\n    if (!this.model.right || right > this.right) this.right = right;\n  },\n  expandRow(row) {\n    if (row) {\n      const dimensions = row.dimensions;\n      if (dimensions) {\n        this.expand(row.number, dimensions.min, row.number, dimensions.max);\n      }\n    }\n  },\n  expandToAddress(addressStr) {\n    const address = colCache.decodeEx(addressStr);\n    this.expand(address.row, address.col, address.row, address.col);\n  },\n\n  get tl() {\n    return colCache.n2l(this.left) + this.top;\n  },\n  get $t$l() {\n    return `$${colCache.n2l(this.left)}$${this.top}`;\n  },\n  get br() {\n    return colCache.n2l(this.right) + this.bottom;\n  },\n  get $b$r() {\n    return `$${colCache.n2l(this.right)}$${this.bottom}`;\n  },\n\n  get range() {\n    return `${this._serialisedSheetName + this.tl}:${this.br}`;\n  },\n  get $range() {\n    return `${this._serialisedSheetName + this.$t$l}:${this.$b$r}`;\n  },\n  get shortRange() {\n    return this.count > 1 ? this.range : this._serialisedSheetName + this.tl;\n  },\n  get $shortRange() {\n    return this.count > 1 ? this.$range : this._serialisedSheetName + this.$t$l;\n  },\n  get count() {\n    return (1 + this.bottom - this.top) * (1 + this.right - this.left);\n  },\n\n  toString() {\n    return this.range;\n  },\n\n  intersects(other) {\n    if (other.sheetName && this.sheetName && other.sheetName !== this.sheetName) return false;\n    if (other.bottom < this.top) return false;\n    if (other.top > this.bottom) return false;\n    if (other.right < this.left) return false;\n    if (other.left > this.right) return false;\n    return true;\n  },\n  contains(addressStr) {\n    const address = colCache.decodeEx(addressStr);\n    return this.containsEx(address);\n  },\n  containsEx(address) {\n    if (address.sheetName && this.sheetName && address.sheetName !== this.sheetName) return false;\n    return address.row >= this.top && address.row <= this.bottom && address.col >= this.left && address.col <= this.right;\n  },\n};\n"],"file":"range.js"}