{"version":3,"sources":["../../../lib/doc/cell.js"],"names":["colCache","require","_","Enums","slideFormula","Cell","row","column","address","Error","_row","_column","validateAddress","_address","_value","Value","create","Types","Null","style","_mergeStyle","_mergeCount","rowStyle","colStyle","numFmt","font","alignment","border","fill","toCsvString","master","release","Merge","type","isMergedTo","text","hyperlink","String","Hyperlink","value","name","workbook","definedNames","addEx","fullAddress","removeEx","removeAllNames","worksheet","number","letter","effectiveType","v","getType","toString","escapeHtml","formula","result","formulaType","sheetName","col","names","getNamesEx","forEach","dataValidations","_dataValidations","find","add","model","ValueType","NullValue","cell","NumberValue","Number","StringValue","replace","RichTextValue","richText","map","t","join","RichText","DateValue","Date","toISOString","HyperlinkValue","Object","assign","undefined","tooltip","MergeValue","_master","addMergeRef","releaseMergeRef","FormulaValue","Formula","sharedFormula","_translatedFormula","findCell","ranges","match","cells","_getTranslatedFormula","FormulaType","Master","Shared","None","SharedStringValue","SharedString","BooleanValue","Boolean","ErrorValue","error","JSONValue","JSON","stringify","rawValue","sharedString","types","f","reduce","p","T","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst colCache = require('../utils/col-cache');\nconst _ = require('../utils/under-dash');\nconst Enums = require('./enums');\nconst { slideFormula } = require('../utils/shared-formula');\n\n// Cell requirements\n//  Operate inside a worksheet\n//  Store and retrieve a value with a range of types: text, number, date, hyperlink, reference, formula, etc.\n//  Manage/use and manipulate cell format either as local to cell or inherited from column or row.\n\nclass Cell {\n  constructor(row, column, address) {\n    if (!row || !column) {\n      throw new Error('A Cell needs a Row');\n    }\n\n    this._row = row;\n    this._column = column;\n\n    colCache.validateAddress(address);\n    this._address = address;\n\n    // TODO: lazy evaluation of this._value\n    this._value = Value.create(Cell.Types.Null, this);\n\n    this.style = this._mergeStyle(row.style, column.style, {});\n\n    this._mergeCount = 0;\n  }\n\n  get worksheet() {\n    return this._row.worksheet;\n  }\n\n  get workbook() {\n    return this._row.worksheet.workbook;\n  }\n\n  // help GC by removing cyclic (and other) references\n  destroy() {\n    delete this.style;\n    delete this._value;\n    delete this._row;\n    delete this._column;\n    delete this._address;\n  }\n\n  // =========================================================================\n  // Styles stuff\n  get numFmt() {\n    return this.style.numFmt;\n  }\n\n  set numFmt(value) {\n    this.style.numFmt = value;\n  }\n\n  get font() {\n    return this.style.font;\n  }\n\n  set font(value) {\n    this.style.font = value;\n  }\n\n  get alignment() {\n    return this.style.alignment;\n  }\n\n  set alignment(value) {\n    this.style.alignment = value;\n  }\n\n  get border() {\n    return this.style.border;\n  }\n\n  set border(value) {\n    this.style.border = value;\n  }\n\n  get fill() {\n    return this.style.fill;\n  }\n\n  set fill(value) {\n    this.style.fill = value;\n  }\n\n  _mergeStyle(rowStyle, colStyle, style) {\n    const numFmt = (rowStyle && rowStyle.numFmt) || (colStyle && colStyle.numFmt);\n    if (numFmt) style.numFmt = numFmt;\n\n    const font = (rowStyle && rowStyle.font) || (colStyle && colStyle.font);\n    if (font) style.font = font;\n\n    const alignment = (rowStyle && rowStyle.alignment) || (colStyle && colStyle.alignment);\n    if (alignment) style.alignment = alignment;\n\n    const border = (rowStyle && rowStyle.border) || (colStyle && colStyle.border);\n    if (border) style.border = border;\n\n    const fill = (rowStyle && rowStyle.fill) || (colStyle && colStyle.fill);\n    if (fill) style.fill = fill;\n\n    return style;\n  }\n\n  // =========================================================================\n  // return the address for this cell\n  get address() {\n    return this._address;\n  }\n\n  get row() {\n    return this._row.number;\n  }\n\n  get col() {\n    return this._column.number;\n  }\n\n  get $col$row() {\n    return `$${this._column.letter}$${this.row}`;\n  }\n\n  // =========================================================================\n  // Value stuff\n\n  get type() {\n    return this._value.type;\n  }\n\n  get effectiveType() {\n    return this._value.effectiveType;\n  }\n\n  toCsvString() {\n    return this._value.toCsvString();\n  }\n\n  // =========================================================================\n  // Merge stuff\n\n  addMergeRef() {\n    this._mergeCount++;\n  }\n\n  releaseMergeRef() {\n    this._mergeCount--;\n  }\n\n  get isMerged() {\n    return (this._mergeCount > 0) || (this.type === Cell.Types.Merge);\n  }\n\n  merge(master) {\n    this._value.release();\n    this._value = Value.create(Cell.Types.Merge, this, master);\n    this.style = master.style;\n  }\n\n  unmerge() {\n    if (this.type === Cell.Types.Merge) {\n      this._value.release();\n      this._value = Value.create(Cell.Types.Null, this);\n      this.style = this._mergeStyle(this._row.style, this._column.style, {});\n    }\n  }\n\n  isMergedTo(master) {\n    if (this._value.type !== Cell.Types.Merge) return false;\n    return this._value.isMergedTo(master);\n  }\n\n  get master() {\n    if (this.type === Cell.Types.Merge) {\n      return this._value.master;\n    }\n    return this; // an unmerged cell is its own master\n  }\n\n  get isHyperlink() {\n    return this._value.type === Cell.Types.Hyperlink;\n  }\n\n  get hyperlink() {\n    return this._value.hyperlink;\n  }\n\n  // return the value\n  get value() {\n    return this._value.value;\n  }\n\n  // set the value - can be number, string or raw\n  set value(v) {\n    // special case - merge cells set their master's value\n    if (this.type === Cell.Types.Merge) {\n      this._value.master.value = v;\n      return;\n    }\n\n    this._value.release();\n\n    // assign value\n    this._value = Value.create(Value.getType(v), this, v);\n  }\n\n  get text() {\n    return this._value.toString();\n  }\n\n  get html() {\n    return _.escapeHtml(this.text);\n  }\n\n  toString() {\n    return this.text;\n  }\n\n  _upgradeToHyperlink(hyperlink) {\n    // if this cell is a string, turn it into a Hyperlink\n    if (this.type === Cell.Types.String) {\n      this._value = Value.create(Cell.Types.Hyperlink, this, {\n        text: this._value.value,\n        hyperlink,\n      });\n    }\n  }\n\n  // =========================================================================\n  // Formula stuff\n  get formula() {\n    return this._value.formula;\n  }\n\n  get result() {\n    return this._value.result;\n  }\n\n  get formulaType() {\n    return this._value.formulaType;\n  }\n\n  // =========================================================================\n  // Name stuff\n  get fullAddress() {\n    const worksheet = this._row.worksheet;\n    return {\n      sheetName: worksheet.name,\n      address: this.address,\n      row: this.row,\n      col: this.col,\n    };\n  }\n\n  get name() {\n    return this.names[0];\n  }\n\n  set name(value) {\n    this.names = [value];\n  }\n\n  get names() {\n    return this.workbook.definedNames.getNamesEx(this.fullAddress);\n  }\n\n  set names(value) {\n    const definedNames = this.workbook.definedNames;\n    this.workbook.definedNames.removeAllNames(this.fullAddress);\n    value.forEach(name => {\n      definedNames.addEx(this.fullAddress, name);\n    });\n  }\n\n  addName(name) {\n    this.workbook.definedNames.addEx(this.fullAddress, name);\n  }\n\n  removeName(name) {\n    this.workbook.definedNames.removeEx(this.fullAddress, name);\n  }\n\n  removeAllNames() {\n    this.workbook.definedNames.removeAllNames(this.fullAddress);\n  }\n\n  // =========================================================================\n  // Data Validation stuff\n  get _dataValidations() {\n    return this.worksheet.dataValidations;\n  }\n\n  get dataValidation() {\n    return this._dataValidations.find(this.address);\n  }\n\n  set dataValidation(value) {\n    this._dataValidations.add(this.address, value);\n  }\n\n  // =========================================================================\n  // Model stuff\n\n  get model() {\n    const {model} = this._value;\n    model.style = this.style;\n    return model;\n  }\n\n  set model(value) {\n    this._value.release();\n    this._value = Value.create(value.type, this);\n    this._value.model = value;\n    if (value.style) {\n      this.style = value.style;\n    } else {\n      this.style = {};\n    }\n  }\n}\nCell.Types = Enums.ValueType;\n\n// =============================================================================\n// Internal Value Types\n\nclass NullValue {\n  constructor(cell) {\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Null,\n    };\n  }\n\n  get value() {\n    return null;\n  }\n\n  set value(value) {\n    // nothing to do\n  }\n\n  get type() {\n    return Cell.Types.Null;\n  }\n\n  get effectiveType() {\n    return Cell.Types.Null;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return '';\n  }\n\n  release() {\n  }\n\n  toString() {\n    return '';\n  }\n}\n\nclass NumberValue {\n  constructor(cell, value) {\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Number,\n      value,\n    };\n  }\n\n  get value() {\n    return this.model.value;\n  }\n\n  set value(value) {\n    this.model.value = value;\n  }\n\n  get type() {\n    return Cell.Types.Number;\n  }\n\n  get effectiveType() {\n    return Cell.Types.Number;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return this.model.value.toString();\n  }\n\n  release() {\n  }\n\n  toString() {\n    return this.model.value.toString();\n  }\n}\n\nclass StringValue {\n  constructor(cell, value) {\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.String,\n      value,\n    };\n  }\n\n  get value() {\n    return this.model.value;\n  }\n\n  set value(value) {\n    this.model.value = value;\n  }\n\n  get type() {\n    return Cell.Types.String;\n  }\n\n  get effectiveType() {\n    return Cell.Types.String;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return `\"${this.model.value.replace(/\"/g, '\"\"')}\"`;\n  }\n\n  release() {\n  }\n\n  toString() {\n    return this.model.value;\n  }\n}\n\nclass RichTextValue {\n  constructor(cell, value) {\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.String,\n      value,\n    };\n  }\n\n  get value() {\n    return this.model.value;\n  }\n\n  set value(value) {\n    this.model.value = value;\n  }\n\n  toString() {\n    return this.model.value.richText.map(t=> t.text).join('');\n  }\n\n  get type() {\n    return Cell.Types.RichText;\n  }\n\n  get effectiveType() {\n    return Cell.Types.RichText;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return `\"${this.text.replace(/\"/g, '\"\"')}\"`;\n  }\n\n  release() {\n  }\n}\n\nclass DateValue {\n  constructor(cell, value) {\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Date,\n      value,\n    };\n  }\n\n  get value() {\n    return this.model.value;\n  }\n\n  set value(value) {\n    this.model.value = value;\n  }\n\n  get type() {\n    return Cell.Types.Date;\n  }\n\n  get effectiveType() {\n    return Cell.Types.Date;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return this.model.value.toISOString();\n  }\n\n  release() {\n  }\n\n  toString() {\n    return this.model.value.toString();\n  }\n}\n\nclass HyperlinkValue {\n  constructor(cell, value) {\n    this.model = Object.assign(\n      {\n      address: cell.address,\n        type: Cell.Types.Hyperlink,\n        text: value ? value.text : undefined,\n        hyperlink: value ? value.hyperlink : undefined,\n      },\n      value && value.tooltip ? {tooltip: value.tooltip} : {}\n    );\n  }\n\n  get value() {\n    return Object.assign(\n      {\n        text: this.model.text,\n        hyperlink: this.model.hyperlink,\n      },\n      this.model.tooltip ? {tooltip: this.model.tooltip} : {}\n    );\n  }\n\n  set value(value) {\n    this.model = Object.assign(\n      {\n        text: value.text,\n        hyperlink: value.hyperlink,\n      },\n      value && value.tooltip ? {tooltip: value.tooltip} : {}\n    );\n  }\n\n  get text() {\n    return this.model.text;\n  }\n\n  set text(value) {\n    this.model.text = value;\n  }\n\n  /*\n  get tooltip() {\n    return this.model.tooltip;\n  }\n\n  set tooltip(value) {\n    this.model.tooltip = value;\n  } */\n\n  get hyperlink() {\n    return this.model.hyperlink;\n  }\n\n  set hyperlink(value) {\n    this.model.hyperlink = value;\n  }\n\n  get type() {\n    return Cell.Types.Hyperlink;\n  }\n\n  get effectiveType() {\n    return Cell.Types.Hyperlink;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return this.model.hyperlink;\n  }\n\n  release() {\n  }\n\n  toString() {\n    return this.model.text;\n  }\n}\n\nclass MergeValue {\n  constructor(cell, master) {\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Merge,\n      master: master ? master.address : undefined,\n    };\n    this._master = master;\n    if (master) {\n      master.addMergeRef();\n    }\n  }\n\n  get value() {\n    return this._master.value;\n  }\n\n  set value(value) {\n    if (value instanceof Cell) {\n      if (this._master) {\n        this._master.releaseMergeRef();\n      }\n      value.addMergeRef();\n      this._master = value;\n    } else {\n      this._master.value = value;\n    }\n  }\n\n  isMergedTo(master) {\n    return master === this._master;\n  }\n\n  get master() {\n    return this._master;\n  }\n\n  get type() {\n    return Cell.Types.Merge;\n  }\n\n  get effectiveType() {\n    return this._master.effectiveType;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return '';\n  }\n\n  release() {\n    this._master.releaseMergeRef();\n  }\n\n  toString() {\n    return this.value.toString();\n  }\n}\n\nclass FormulaValue {\n  constructor(cell, value) {\n    this.cell = cell;\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Formula,\n      formula: value ? value.formula : undefined,\n      sharedFormula: value ? value.sharedFormula : undefined,\n      result: value ? value.result : undefined,\n    };\n  }\n\n  get value() {\n    return this.model.formula ?\n      {\n        formula: this.model.formula,\n        result: this.model.result,\n      } :\n      {\n        sharedFormula: this.model.sharedFormula,\n        result: this.model.result,\n      };\n  }\n\n  set value(value) {\n    this.model.formula = value.formula;\n    this.model.sharedFormula = value.sharedFormula;\n    this.model.result = value.result;\n  }\n\n  validate(value) {\n    switch (Value.getType(value)) {\n      case Cell.Types.Null:\n      case Cell.Types.String:\n      case Cell.Types.Number:\n      case Cell.Types.Date:\n        break;\n      case Cell.Types.Hyperlink:\n      case Cell.Types.Formula:\n      default:\n        throw new Error('Cannot process that type of result value');\n    }\n  }\n\n  get dependencies() {\n    // find all the ranges and cells mentioned in the formula\n    const ranges = this.formula.match(/([a-zA-Z0-9]+!)?[A-Z]{1,3}\\d{1,4}:[A-Z]{1,3}\\d{1,4}/g);\n    const cells = this.formula.replace(/([a-zA-Z0-9]+!)?[A-Z]{1,3}\\d{1,4}:[A-Z]{1,3}\\d{1,4}/g, '')\n      .match(/([a-zA-Z0-9]+!)?[A-Z]{1,3}\\d{1,4}/g);\n    return {\n      ranges,\n      cells,\n    };\n  }\n\n  get formula() {\n    return this.model.formula ||\n      this._getTranslatedFormula();\n  }\n\n  set formula(value) {\n    this.model.formula = value;\n  }\n\n  get formulaType() {\n    if (this.model.formula) {\n      return Enums.FormulaType.Master;\n    }\n    if (this.model.sharedFormula) {\n      return Enums.FormulaType.Shared;\n    }\n    return Enums.FormulaType.None;\n  }\n\n  get result() {\n    return this.model.result;\n  }\n\n  set result(value) {\n    this.model.result = value;\n  }\n\n  get type() {\n    return Cell.Types.Formula;\n  }\n\n  get effectiveType() {\n    const v = this.model.result;\n    if ((v === null) || (v === undefined)) {\n      return Enums.ValueType.Null;\n    }\n    if (v instanceof String || typeof v === 'string') {\n      return Enums.ValueType.String;\n    }\n    if (typeof v === 'number') {\n      return Enums.ValueType.Number;\n    }\n    if (v instanceof Date) {\n      return Enums.ValueType.Date;\n    }\n    if (v.text && v.hyperlink) {\n      return Enums.ValueType.Hyperlink;\n    }\n    if (v.formula) {\n      return Enums.ValueType.Formula;\n    }\n\n    return Enums.ValueType.Null;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  _getTranslatedFormula() {\n    if (!this._translatedFormula && this.model.sharedFormula) {\n      const {worksheet} = this.cell;\n      const master = worksheet.findCell(this.model.sharedFormula);\n      this._translatedFormula = master &&\n        slideFormula(master.formula, master.address, this.model.address);\n    }\n    return this._translatedFormula;\n  }\n\n  toCsvString() {\n    return `${this.model.result || ''}`;\n  }\n\n  release() {\n  }\n\n  toString() {\n    return this.model.result ? this.model.result.toString() : '';\n  }\n}\n\nclass SharedStringValue {\n  constructor(cell, value) {\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.SharedString,\n      value,\n    };\n  }\n\n  get value() {\n    return this.model.value;\n  }\n\n  set value(value) {\n    this.model.value = value;\n  }\n\n  get type() {\n    return Cell.Types.SharedString;\n  }\n\n  get effectiveType() {\n    return Cell.Types.SharedString;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return this.model.value.toString();\n  }\n\n  release() {\n  }\n\n  toString() {\n    return this.model.value.toString();\n  }\n}\n\nclass BooleanValue {\n  constructor(cell, value) {\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Boolean,\n      value,\n    };\n  }\n\n  get value() {\n    return this.model.value;\n  }\n\n  set value(value) {\n    this.model.value = value;\n  }\n\n  get type() {\n    return Cell.Types.Boolean;\n  }\n\n  get effectiveType() {\n    return Cell.Types.Boolean;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return this.model.value ? 1 : 0;\n  }\n\n  release() {\n  }\n\n  toString() {\n    return this.model.value.toString();\n  }\n}\n\nclass ErrorValue {\n  constructor(cell, value) {\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Error,\n      value,\n    };\n  }\n\n  get value() {\n    return this.model.value;\n  }\n\n  set value(value) {\n    this.model.value = value;\n  }\n\n  get type() {\n    return Cell.Types.Error;\n  }\n\n  get effectiveType() {\n    return Cell.Types.Error;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return this.toString();\n  }\n\n  release() {\n  }\n\n  toString() {\n    return this.model.value.error.toString();\n  }\n}\n\nclass JSONValue {\n  constructor(cell, value) {\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.String,\n      value: JSON.stringify(value),\n      rawValue: value,\n    };\n  }\n\n  get value() {\n    return this.model.rawValue;\n  }\n\n  set value(value) {\n    this.model.rawValue = value;\n    this.model.value = JSON.stringify(value);\n  }\n\n  get type() {\n    return Cell.Types.String;\n  }\n\n  get effectiveType() {\n    return Cell.Types.String;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return this.model.value;\n  }\n\n  release() {\n  }\n\n  toString() {\n    return this.model.value;\n  }\n}\n\n// Value is a place to hold common static Value type functions\nconst Value = {\n  getType(value) {\n    if ((value === null) || (value === undefined)) {\n      return Cell.Types.Null;\n    }\n    if (value instanceof String || typeof value === 'string') {\n      return Cell.Types.String;\n    }\n    if (typeof value === 'number') {\n      return Cell.Types.Number;\n    }\n    if (typeof value === 'boolean') {\n      return Cell.Types.Boolean;\n    }\n    if (value instanceof Date) {\n      return Cell.Types.Date;\n    }\n    if (value.text && value.hyperlink) {\n      return Cell.Types.Hyperlink;\n    }\n    if (value.formula || value.sharedFormula) {\n      return Cell.Types.Formula;\n    }\n    if (value.richText) {\n      return Cell.Types.RichText;\n    }\n    if (value.sharedString) {\n      return Cell.Types.SharedString;\n    }\n    if (value.error) {\n      return Cell.Types.Error;\n    }\n    return Cell.Types.JSON;\n  },\n\n  // map valueType to constructor\n  types: [\n    { t: Cell.Types.Null, f: NullValue },\n    { t: Cell.Types.Number, f: NumberValue },\n    { t: Cell.Types.String, f: StringValue },\n    { t: Cell.Types.Date, f: DateValue },\n    { t: Cell.Types.Hyperlink, f: HyperlinkValue },\n    { t: Cell.Types.Formula, f: FormulaValue },\n    { t: Cell.Types.Merge, f: MergeValue },\n    { t: Cell.Types.JSON, f: JSONValue },\n    { t: Cell.Types.SharedString, f: SharedStringValue },\n    { t: Cell.Types.RichText, f: RichTextValue },\n    { t: Cell.Types.Boolean, f: BooleanValue },\n    { t: Cell.Types.Error, f: ErrorValue },\n  ].reduce((p, t) => {\n    p[t.t] = t.f;\n    return p;\n  }, []),\n\n  create(type, cell, value) {\n    const T = this.types[type];\n    if (!T) {\n      throw new Error(`Could not create Value of type ${type}`);\n    }\n    return new T(cell, value);\n  },\n};\n\nmodule.exports = Cell;\n"],"file":"cell.js"}