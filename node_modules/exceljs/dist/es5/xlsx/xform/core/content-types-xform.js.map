{"version":3,"sources":["../../../../../lib/xlsx/xform/core/content-types-xform.js"],"names":["utils","require","XmlStream","BaseXform","ContentTypesXform","module","exports","inherits","PROPERTY_ATTRIBUTES","xmlns","render","xmlStream","model","openXml","StdDocAttributes","openNode","mediaHash","media","forEach","medium","type","imageType","extension","leafNode","Extension","ContentType","PartName","worksheets","worksheet","name","id","hasSharedStrings","sharedStrings","count","drawings","drawing","closeNode","parseOpen","parseText","parseClose"],"mappings":"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","sourcesContent":["'use strict';\n\nconst utils = require('../../../utils/utils');\nconst XmlStream = require('../../../utils/xml-stream');\n\nconst BaseXform = require('../base-xform');\n\n// used for rendering the [Content_Types].xml file\n// not used for parsing\nconst ContentTypesXform = (module.exports = function() {});\n\nutils.inherits(\n  ContentTypesXform,\n  BaseXform,\n  {\n    PROPERTY_ATTRIBUTES: {\n      xmlns: 'http://schemas.openxmlformats.org/package/2006/content-types',\n    },\n  },\n  {\n    render(xmlStream, model) {\n      xmlStream.openXml(XmlStream.StdDocAttributes);\n\n      xmlStream.openNode('Types', ContentTypesXform.PROPERTY_ATTRIBUTES);\n\n      const mediaHash = {};\n      (model.media || []).forEach(medium => {\n        if (medium.type === 'image') {\n          const imageType = medium.extension;\n          if (!mediaHash[imageType]) {\n            mediaHash[imageType] = true;\n            xmlStream.leafNode('Default', { Extension: imageType, ContentType: `image/${imageType}` });\n          }\n        }\n      });\n\n      xmlStream.leafNode('Default', { Extension: 'rels', ContentType: 'application/vnd.openxmlformats-package.relationships+xml' });\n      xmlStream.leafNode('Default', { Extension: 'xml', ContentType: 'application/xml' });\n\n      xmlStream.leafNode('Override', {\n        PartName: '/xl/workbook.xml',\n        ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml',\n      });\n\n      model.worksheets.forEach(worksheet => {\n        const name = `/xl/worksheets/sheet${worksheet.id}.xml`;\n        xmlStream.leafNode('Override', { PartName: name, ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml' });\n      });\n\n      xmlStream.leafNode('Override', { PartName: '/xl/theme/theme1.xml', ContentType: 'application/vnd.openxmlformats-officedocument.theme+xml' });\n      xmlStream.leafNode('Override', { PartName: '/xl/styles.xml', ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml' });\n\n      const hasSharedStrings = model.sharedStrings && model.sharedStrings.count;\n      if (hasSharedStrings) {\n        xmlStream.leafNode('Override', {\n          PartName: '/xl/sharedStrings.xml',\n          ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml',\n        });\n      }\n\n      model.drawings &&\n        model.drawings.forEach(drawing => {\n          xmlStream.leafNode('Override', {\n            PartName: `/xl/drawings/${drawing.name}.xml`,\n            ContentType: 'application/vnd.openxmlformats-officedocument.drawing+xml',\n          });\n        });\n\n      xmlStream.leafNode('Override', { PartName: '/docProps/core.xml', ContentType: 'application/vnd.openxmlformats-package.core-properties+xml' });\n      xmlStream.leafNode('Override', { PartName: '/docProps/app.xml', ContentType: 'application/vnd.openxmlformats-officedocument.extended-properties+xml' });\n\n      xmlStream.closeNode();\n    },\n\n    parseOpen() {\n      return false;\n    },\n    parseText() {},\n    parseClose() {\n      return false;\n    },\n  }\n);\n"],"file":"content-types-xform.js"}